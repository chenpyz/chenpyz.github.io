<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在vue中使用xlsx导出表格</title>
    <link href="/2023/12/06/2304vue%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/"/>
    <url>/2023/12/06/2304vue%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i xlsx<br><br><span class="hljs-comment">// utils/exel.ts</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">XLSX</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xlsx&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">exportFile</span> = (<span class="hljs-params">arr: any[]</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">AMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;导出的数据不能为空&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// const sheet = XLSX.utils.json_to_sheet(arr);</span><br>  <span class="hljs-comment">// const book = XLSX.utils.book_new();</span><br>  <span class="hljs-comment">// XLSX.utils.book_append_sheet(book, sheet, &#x27;sheet1&#x27;);</span><br>  <span class="hljs-comment">// XLSX.writeFile(book, `user$&#123;(new Date()).getTime()&#125;.xls`);</span><br>  <span class="hljs-keyword">const</span> wb = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_new</span>();<br><br>  <span class="hljs-comment">// 自定义多级表头</span><br>  <span class="hljs-keyword">const</span> header = [<br>    <span class="hljs-comment">// 第一级表头</span><br>    [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;个性化&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;内容属性&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;整体&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>],<br>    <span class="hljs-comment">// 第二级表头</span><br>    [<span class="hljs-string">&#x27;mid&#x27;</span>, <span class="hljs-string">&#x27;buvid&#x27;</span>, <span class="hljs-string">&#x27;人群属性&#x27;</span>, <span class="hljs-string">&#x27;三观&#x27;</span>, <span class="hljs-string">&#x27;兴趣选择&#x27;</span>, <span class="hljs-string">&#x27;长期兴趣&#x27;</span>, <span class="hljs-string">&#x27;已关注&#x27;</span>, <span class="hljs-string">&#x27;近期行为&#x27;</span>, <span class="hljs-string">&#x27;实时行为&#x27;</span>, <span class="hljs-string">&#x27;原创&#x27;</span>, <span class="hljs-string">&#x27;特色&#x27;</span>, <span class="hljs-string">&#x27;专业性&#x27;</span>, <span class="hljs-string">&#x27;时效性&#x27;</span>, <span class="hljs-string">&#x27;情感共鸣&#x27;</span>, <span class="hljs-string">&#x27;获得感&#x27;</span>, <span class="hljs-string">&#x27;美学&#x27;</span>, <span class="hljs-string">&#x27;多样性&#x27;</span>, <span class="hljs-string">&#x27;安全性&#x27;</span>],<br>  ];<br><br>  <span class="hljs-comment">// 合并单元格并居中文字</span><br>  <span class="hljs-keyword">const</span> mergeCells = [<br>    <span class="hljs-comment">// 合并第一级表头的单元格</span><br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">0</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">8</span> &#125; &#125;,<br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">9</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">13</span> &#125; &#125;,<br>    &#123; <span class="hljs-attr">s</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">14</span> &#125;, <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">17</span> &#125; &#125;,<br>    <span class="hljs-comment">// 合并第二级表头的单元格</span><br>    <span class="hljs-comment">// &#123; s: &#123; r: 1, c: 0 &#125;, e: &#123; r: 1, c: 2 &#125; &#125;,</span><br>    <span class="hljs-comment">// &#123; s: &#123; r: 1, c: 3 &#125;, e: &#123; r: 1, c: 5 &#125; &#125;,</span><br>  ];<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;要导出的arr===&gt;&#x27;</span>, arr);<br>  <span class="hljs-keyword">const</span> exportData = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item:any</span>) =&gt;</span> [<br>    item.<span class="hljs-property">mid</span>,<br>    item.<span class="hljs-property">buvid</span>,<br>    ...(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(item.<span class="hljs-property">extra</span>)),<br>  ]);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exportData&#x27;</span>, exportData);<br><br>  <span class="hljs-keyword">const</span> wsData = [...header, ...exportData];<br>  <span class="hljs-keyword">const</span> ws = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">json_to_sheet</span>(wsData, &#123; <span class="hljs-attr">skipHeader</span>: <span class="hljs-literal">true</span> &#125;);<br>  <span class="hljs-comment">// 自动调整列宽以适应最长的值</span><br>  <span class="hljs-comment">// const colWidths = header[0].map(() =&gt; (&#123; wch: 0 &#125;));</span><br>  <span class="hljs-keyword">const</span> colWidths = header[<span class="hljs-number">1</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">wch</span>: <span class="hljs-number">0</span> &#125;));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;colWidths&#x27;</span>, colWidths);<br><br>  wsData.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">row</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;row&#x27;</span>, row);<br><br>    row.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cell, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (cell &amp;&amp; cell.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">const</span> textWidth = cell.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span> * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">// 如果是第一行（列头），以列头宽度为准</span><br>          colWidths[i].<span class="hljs-property">wch</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(colWidths[i].<span class="hljs-property">wch</span>, textWidth);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 如果是数据行，以内容宽度为准</span><br>          colWidths[i].<span class="hljs-property">wch</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(colWidths[i].<span class="hljs-property">wch</span>, textWidth);<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;);<br>  <span class="hljs-comment">// wsData.forEach((row) =&gt; &#123;</span><br>  <span class="hljs-comment">//   row.forEach((cell, i) =&gt; &#123;</span><br>  <span class="hljs-comment">//     if (cell &amp;&amp; cell.length) &#123;</span><br>  <span class="hljs-comment">//       const textWidth = cell.toString().length;</span><br>  <span class="hljs-comment">//       console.log(&#x27;textWidth&#x27;, textWidth);</span><br><br>  <span class="hljs-comment">//       // 如果是第一行（列头），以列头宽度为准</span><br>  <span class="hljs-comment">//       if (colWidths[i].wch) &#123;</span><br>  <span class="hljs-comment">//         colWidths[i].wch = Math.max(colWidths[i].wch, textWidth);</span><br>  <span class="hljs-comment">//       &#125;</span><br>  <span class="hljs-comment">//     &#125;</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;);</span><br>  ws[<span class="hljs-string">&#x27;!cols&#x27;</span>] = colWidths;<br><br>  <span class="hljs-comment">// 将合并单元格信息应用于工作表</span><br>  ws[<span class="hljs-string">&#x27;!merges&#x27;</span>] = mergeCells;<br><br>  <span class="hljs-comment">// 针对合并的单元格设置居中样式</span><br>  <span class="hljs-comment">// ws.A1.s = &#123; alignment: &#123; horizontal: &#x27;center&#x27;, vertical: &#x27;center&#x27; &#125; &#125;;</span><br>  <span class="hljs-comment">// ws.D1.s = &#123; alignment: &#123; horizontal: &#x27;center&#x27;, vertical: &#x27;center&#x27; &#125; &#125;;</span><br><br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_append_sheet</span>(wb, ws, <span class="hljs-string">&#x27;Sheet1&#x27;</span>);<br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-title function_">writeFile</span>(wb, <span class="hljs-string">&#x27;exported_data.xlsx&#x27;</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ts技术</title>
    <link href="/2023/11/06/2303Ts%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/11/06/2303Ts%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h4 id="Ts-基础类型："><a href="#Ts-基础类型：" class="headerlink" title="Ts 基础类型："></a>Ts 基础类型：</h4><p>Ts 基础类型有：数值（Number）、字符串（String）、布尔（Boolean）、数组（Array）、枚举（Enum）、Any、元祖（Tuple）、Void、Unknown、Never、Null 和 Undefined。</p><h4 id="Ts-高级类型："><a href="#Ts-高级类型：" class="headerlink" title="Ts 高级类型："></a>Ts 高级类型：</h4><h5 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h5><p>联合类型表示取值可以为多种类型中的一种，使用 | 分隔每个类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">myFavoriteNumber</span>: string | number;<br>myFavoriteNumber = <span class="hljs-string">&quot;seven&quot;</span>; <span class="hljs-comment">// OK</span><br>myFavoriteNumber = <span class="hljs-number">7</span>; <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>联合类型通常与 null 或 undefined 一起使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sayHello</span> = (<span class="hljs-params">name: string | <span class="hljs-literal">undefined</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">/* ... */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>例如，这里 name 的类型是 string | undefined 意味着可以将 string 或 undefined 的值传递给 sayHello 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&quot;Semlinker&quot;</span>);<br><span class="hljs-title function_">sayHello</span>(<span class="hljs-literal">undefined</span>);<br></code></pre></td></tr></table></figure><p>通过这个示例，你可以凭直觉知道类型 A 和类型 B 联合后的类型是同时接受 A 和 B 值的类型。</p><h5 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h5><p>TypeScript 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">id</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br><br>interface <span class="hljs-title class_">IWorker</span> &#123;<br>  <span class="hljs-attr">companyId</span>: string;<br>&#125;<br><br>type <span class="hljs-title class_">IStaff</span> = <span class="hljs-title class_">IPerson</span> &amp; <span class="hljs-title class_">IWorker</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">staff</span>: <span class="hljs-title class_">IStaff</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;E1006&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br>  <span class="hljs-attr">companyId</span>: <span class="hljs-string">&quot;EFT&quot;</span>,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(staff);<br></code></pre></td></tr></table></figure><h5 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h5><p>类型别名会给一个类型起个新名字。 类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">type <span class="hljs-title class_">Message</span> = string | string[];<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">greet</span> = (<span class="hljs-params">message: Message</span>) =&gt; &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对象的本质</title>
    <link href="/2023/06/16/2301%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <url>/2023/06/16/2301%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<p>为什么数字字符串布尔值不是对象，却可以调用一些方法，使用一些属性呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br>num.<span class="hljs-title function_">toString</span>();<br></code></pre></td></tr></table></figure><p>因为我们 JS 中提供很多对象。就像数组，我们可以直接通过[]声明数组，也可以通过 new Array()<br>我们的字符串数字布尔值等，他们再调用方法时，js 会帮助我们。通过 new Number new String new Boolean 来把对应的原始值，转换为对象，然后再调用相关的属性或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br>num.<span class="hljs-title function_">toString</span>();<br><br><span class="hljs-comment">// 本质上</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(num).<span class="hljs-title function_">toString</span>();<br></code></pre></td></tr></table></figure><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><p>这个是获取到某写对象的原始值。这个方法我们不会主动使用，这是给 JS 内部自己使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">valueOf</span>()); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>new String new Number new Boolean 他们生成的对象的 valueOf 都是对应的原始值。<br>数组，对象的 valueOf 得到的还是自身。<br>在我们进行相关的比较时，会将对应的内容转换为原始值进行比较</p><p>— 先通过 valueOf 转为原始值，如果成功则比较<br>— 如果不成功，则再通过 toString 转成字符串进行比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[] == <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>数组转字符串，会变成 去掉中括号后的字符串 [1,2,3]&#x3D;&gt;”1,2,3”<br>对象转字符串，会变成[object Object]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器的缓存</title>
    <link href="/2023/05/20/2302%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <url>/2023/05/20/2302%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="设置浏览器缓存"><a href="#设置浏览器缓存" class="headerlink" title="设置浏览器缓存"></a>设置浏览器缓存</h2><p>在 Vue 项目中设置浏览器缓存可以通过配置 HTTP 头部或使用插件来完成。下面我将分别介绍这两种方法。</p><p>— 配置 HTTP 头部： 在你的后端服务器上配置适当的 HTTP 头部可以告诉浏览器如何缓存你的静态资源。你可以设置 Cache-Control 和 Expires 等头部字段以控制缓存时间。 例如，在使用 Express.js 的 Node.js 服务器上，你可以通过以下代码设置缓存：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<br>  express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>, &#123;<br>    <span class="hljs-attr">maxAge</span>: <span class="hljs-string">&quot;1d&quot;</span>,<br>    <span class="hljs-attr">etag</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">lastModified</span>: <span class="hljs-literal">false</span>,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">在这个例子中，<span class="hljs-string">`maxAge`</span> 设置了资源的缓存过期时间为一天。<br></code></pre></td></tr></table></figure><p>— 使用插件： 你可以使用第三方插件来帮助你管理浏览器缓存。例如，你可以考虑使用 Axios、vue-resource 或 vue-axios 等插件，它们具有内置的缓存控制功能。 安装插件后，你可以通过设置请求的 cache 选项来控制缓存行为。以下是一个使用 Axios 的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-comment">// 发送 GET 请求并启用缓存</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;your-api-endpoint&#x27;</span>, &#123; <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span> &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理响应数据</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理错误</span><br>  &#125;);<span class="hljs-string">`</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">通过将 <span class="hljs-string">`cache`</span> 选项设置为 <span class="hljs-string">`true`</span>，<span class="hljs-title class_">Axios</span> 将自动处理缓存并在需要时从缓存中获取数据。<br></code></pre></td></tr></table></figure><h2 id="清除浏览器缓存"><a href="#清除浏览器缓存" class="headerlink" title="清除浏览器缓存"></a>清除浏览器缓存</h2><p>你无法直接从 Vue 项目中自动清除浏览器缓存，因为这个过程是由浏览器自动完成的。但是，你可以通过代码中的某些技术手段来间接实现自动清除浏览器缓存的效果。</p><p>下面是两种常见的方法：</p><p>1,版本控制： 通过在你的静态资源的 URL 中添加版本号或时间戳，可以强制浏览器在每次更新后重新下载资源。例如，可以在引入你的 CSS 和 JavaScript 文件时，将文件名中包含版本号或时间戳：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/styles.css?v=1.0&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/app.js?v=1.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="hljs-string">`</span><br></code></pre></td></tr></table></figure><p>当你更新了静态资源时，修改 URL 中的版本号或时间戳，这样浏览器会认为这是一个新的资源，从而重新下载并更新缓存。<br>2,缓存控制： 在你的后端服务器上配置适当的 HTTP 头部，可以告诉浏览器在更新后不要使用缓存的旧版本。你可以设置 Cache-Control 和 Expires 等头部字段来控制缓存时间，以及使用 ETag 或 Last-Modified 等字段进行缓存验证。<br>例如，在使用 Express.js 的 Node.js 服务器上，你可以通过以下代码禁用缓存：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-cache, no-store, must-revalidate&quot;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Expires&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样，每次请求该资源时，浏览器都会重新从服务器获取最新的资源，而不是使用缓存中的旧版本。<br>请注意，这些方法都只能间接实现自动清除浏览器缓存的效果，并不能真正清除浏览器缓存。用户仍然可以通过浏览器设置手动清除缓存。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue中的插槽</title>
    <link href="/2022/10/22/2201/"/>
    <url>/2022/10/22/2201/</url>
    
    <content type="html"><![CDATA[<h1 id="1-插槽"><a href="#1-插槽" class="headerlink" title="1.插槽"></a>1.插槽</h1><p>我们在构建页面过程中一般会把用的比较多的公共的部分抽取出来作为一个单独的组件，但是在实际使用这个组件的时候却又不能完全的满足需求，我希望在这个组件中添加一点东西，这时候我们就需要用到插槽来分发内容。<br>插槽的作用：让用户可以拓展组件，去更好地复用组件和对其做定制化处理<br>插槽分三种： 匿名插槽 、具名插槽、作用域插槽</p><h1 id="2-匿名插槽"><a href="#2-匿名插槽" class="headerlink" title="2.匿名插槽"></a>2.匿名插槽</h1><p>作用： 只有一个插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const com = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的底部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="3-插槽的默认内容"><a href="#3-插槽的默认内容" class="headerlink" title="3.插槽的默认内容"></a>3.插槽的默认内容</h1><p>当子组件没有定制插槽内容时，显示默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const com = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的底部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="4-具名插槽"><a href="#4-具名插槽" class="headerlink" title="4. 具名插槽"></a>4. 具名插槽</h1><p>当需要为子组件定义多个插槽时，要使用具名插槽 。 就是给这个插槽起个名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span> <span class="hljs-attr">:</span> <span class="hljs-attr">header</span>&gt;</span></span><br><span class="language-xml">            漂亮</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>：<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">            帅气</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            默认的插槽</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const com = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template:`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件的内容不变<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意：一个不带 name 的 出口会带有隐含的名字“default”</p><h1 id="5-作用域插槽"><a href="#5-作用域插槽" class="headerlink" title="5.作用域插槽"></a>5.作用域插槽</h1><p>注：必须使用 vue2.7 以上的版本<br>如果让插槽内容能够访问子组件中才有的数据，需要使用作用域插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">com</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span></span><br><span class="language-xml">            header</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 注：父组件模板中的data,为子组件slot作用域传递的对象 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span></span><br><span class="language-xml">            footer: &#123;&#123;data.msg&#125;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">com</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const Com = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        data() &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            return &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                msg: &#x27;子组件数据&#x27;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>子组件的标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                // 注：slot用自定义属性将子组件的值传给父组件插槽</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
